import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="HR Learning Analytics Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(file):
    df = pd.read_excel(file, sheet_name="–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ï–†–í–ò–ß–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.replace('-', np.nan)
    df['–¥–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'] = pd.to_datetime(df['–¥–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'], errors='coerce')
    df['–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è'] = pd.to_datetime(df['–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è'], errors='coerce')
    df['–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'] = pd.to_datetime(df['–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'], errors='coerce')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
    df['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–∏)'] = (df['–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'] - df['–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è']).dt.days
    
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
def apply_style():
    st.markdown("""
    <style>
    .main {
        background-color: #f8f9fa;
    }
    .st-b7 {
        background-color: #ffffff;
    }
    .st-at {
        background-color: #e9ecef;
    }
    .css-1aumxhk {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .css-1v0mbdj {
        border-radius: 10px;
    }
    .st-bq {
        border-radius: 10px;
    }
    .st-ae {
        border-radius: 10px;
    }
    h1, h2, h3, h4, h5, h6 {
        color: #2c3e50;
    }
    </style>
    """, unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    apply_style()
    
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
    st.markdown("---")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—É—á–µ–Ω–∏—è", type=["xlsx"])
    
    if uploaded_file is not None:
        df = load_data(uploaded_file)
        
        # –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö
        st.sidebar.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
        st.sidebar.write(f"–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(df)}")
        st.sidebar.write(f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.sidebar.markdown("### –§–∏–ª—å—Ç—Ä—ã")
        departments = ['–í—Å–µ'] + list(df['–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'].unique())
        selected_dept = st.sidebar.selectbox("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", departments)
        
        if selected_dept != '–í—Å–µ':
            dept_df = df[df['–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'] == selected_dept]
            teams = ['–í—Å–µ'] + list(dept_df['–æ—Ç–¥–µ–ª'].dropna().unique())
            selected_team = st.sidebar.selectbox("–û—Ç–¥–µ–ª", teams)
            
            if selected_team != '–í—Å–µ':
                filtered_df = dept_df[dept_df['–æ—Ç–¥–µ–ª'] == selected_team]
            else:
                filtered_df = dept_df
        else:
            filtered_df = df
        
        statuses = ['–í—Å–µ'] + list(df['—Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'].unique())
        selected_status = st.sidebar.selectbox("–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è", statuses)
        
        if selected_status != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['—Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'] == selected_status]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", len(filtered_df))
        
        with col2:
            completed = len(filtered_df[filtered_df['—Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'] == '–∑–∞–≤–µ—Ä—à–µ–Ω–æ'])
            st.metric("–ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ", f"{completed} ({completed/len(filtered_df)*100:.1f}%)" if len(filtered_df) > 0 else "0")
        
        with col3:
            avg_score = filtered_df['–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'].mean()
            st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{avg_score:.1f}" if not pd.isna(avg_score) else "N/A")
        
        st.markdown("---")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1: –°—Ç–∞—Ç—É—Å—ã –æ–±—É—á–µ–Ω–∏—è
        st.subheader("–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è")
        status_counts = filtered_df['—Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'].value_counts().reset_index()
        status_counts.columns = ['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        
        fig1 = px.pie(status_counts, values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', names='–°—Ç–∞—Ç—É—Å', 
                     color='–°—Ç–∞—Ç—É—Å',
                     color_discrete_map={
                         '–∑–∞–≤–µ—Ä—à–µ–Ω–æ': '#2ecc71',
                         '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ': '#f39c12',
                         '–Ω–µ –Ω–∞—á–∞—Ç–æ': '#e74c3c'
                     },
                     hole=0.4)
        fig1.update_traces(textposition='inside', textinfo='percent+label')
        fig1.update_layout(showlegend=False)
        
        st.plotly_chart(fig1, use_container_width=True)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º –æ–±—É—á–µ–Ω–∏—è")
        
        modules = [
            '–¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –ú–ü –ù–ê –ú–ü–ü', 
            '–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê –ú–Ø–°–ù–û–ô –ü–†–û–î–£–ö–¶–ò–ò',
            '–ü–û–õ–£–¢–£–®–ò',
            '–ò–ù–î–£–°–¢–†–ò–ê–õ–¨–ù–´–ô –£–ü–ê–ö–û–í–ö–ê',
            '–ü–û–¢–†–ï–ë–ò–¢–ï–õ–¨–°–ö–ê–Ø –£–ü–ê–ö–û–í–ö–ê',
            '–î–Æ–†–û–ö',
            '–¢–†–ò–ú–ú–ò–ù–ì',
            '–°–£–ë–ü–†–û–î–£–ö–¢–´',
            '–ò—Ç–æ–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.'
        ]
        
        module_scores = []
        
        for module in modules:
            attempt1_col = f"{module} –ø–æ–ø—ã—Ç–∫–∞ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            attempt2_col = f"{module} –ø–æ–ø—ã—Ç–∫–∞ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            
            if attempt1_col in df.columns:
                scores = []
                for idx, row in filtered_df.iterrows():
                    if not pd.isna(row[attempt1_col]):
                        if row[attempt1_col] >= 85:
                            scores.append(row[attempt1_col])
                        elif not pd.isna(row.get(attempt2_col, np.nan)):
                            scores.append(row[attempt2_col])
                
                if scores:
                    module_scores.append({
                        '–ú–æ–¥—É–ª—å': module,
                        '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': np.mean(scores),
                        '–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç': len([s for s in scores if s >= 85]) / len(scores) * 100
                    })
        
        if module_scores:
            module_df = pd.DataFrame(module_scores)
            
            fig2 = px.bar(module_df, x='–ú–æ–¥—É–ª—å', y='–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª',
                         color='–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç',
                         color_continuous_scale='Viridis',
                         text='–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª')
            fig2.update_traces(texttemplate='%{text:.1f}', textposition='outside')
            fig2.update_layout(yaxis_range=[0,100])
            
            st.plotly_chart(fig2, use_container_width=True)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 3: –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
        
        if '–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è' in filtered_df.columns and '–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è' in filtered_df.columns:
            timeline_df = filtered_df.copy()
            timeline_df['–ú–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞'] = timeline_df['–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è'].dt.to_period('M').dt.to_timestamp()
            
            monthly_data = timeline_df.groupby('–ú–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞').agg({
                '–§–ò–û': 'count',
                '—Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è': lambda x: (x == '–∑–∞–≤–µ—Ä—à–µ–Ω–æ').sum()
            }).reset_index()
            
            monthly_data.columns = ['–ú–µ—Å—è—Ü', '–í—Å–µ–≥–æ –Ω–∞—á–∞–ª–∏', '–ó–∞–≤–µ—Ä—à–∏–ª–∏']
            monthly_data['–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'] = monthly_data['–ó–∞–≤–µ—Ä—à–∏–ª–∏'] / monthly_data['–í—Å–µ–≥–æ –Ω–∞—á–∞–ª–∏'] * 100
            
            fig3 = go.Figure()
            
            fig3.add_trace(go.Scatter(
                x=monthly_data['–ú–µ—Å—è—Ü'],
                y=monthly_data['–í—Å–µ–≥–æ –Ω–∞—á–∞–ª–∏'],
                name='–ù–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ',
                line=dict(color='#3498db', width=3)
            )
            
            fig3.add_trace(go.Scatter(
                x=monthly_data['–ú–µ—Å—è—Ü'],
                y=monthly_data['–ó–∞–≤–µ—Ä—à–∏–ª–∏'],
                name='–ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ',
                line=dict(color='#2ecc71', width=3)
            )
            
            fig3.add_trace(go.Scatter(
                x=monthly_data['–ú–µ—Å—è—Ü'],
                y=monthly_data['–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'],
                name='–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
                line=dict(color='#f39c12', width=3),
                yaxis='y2'
            )
            
            fig3.update_layout(
                yaxis=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'),
                yaxis2=dict(title='–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (%)', overlaying='y', side='right'),
                hovermode='x unified'
            )
            
            st.plotly_chart(fig3, use_container_width=True)
                           
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 4: –ü–æ—Å–µ—â–µ–Ω–∏–µ –ú–ü–ü (–¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞)
        if selected_dept == '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç' or selected_dept == '–í—Å–µ':
            st.subheader("–ü–æ—Å–µ—â–µ–Ω–∏–µ –ú–ü–ü (–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç)")
            
            mpp_df = df[df['–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'] == '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç']
            
            if not mpp_df.empty:
                mpp_status = mpp_df['–ü–æ—Å–µ—â–µ–Ω–∏–µ –ú–ü–ü'].value_counts().reset_index()
                mpp_status.columns = ['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
                
                fig4 = px.bar(mpp_status, x='–°—Ç–∞—Ç—É—Å', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                             color='–°—Ç–∞—Ç—É—Å',
                             color_discrete_map={
                                 '–ø—Ä–æ–π–¥–µ–Ω–æ': '#2ecc71',
                                 '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ': '#f39c12',
                                 '-': '#95a5a6'
                             })
                
                st.plotly_chart(fig4, use_container_width=True)
                
                total_assigned = len(mpp_df[mpp_df['–ü–æ—Å–µ—â–µ–Ω–∏–µ –ú–ü–ü'] != '-'])
                completed_mpp = len(mpp_df[mpp_df['–ü–æ—Å–µ—â–µ–Ω–∏–µ –ú–ü–ü'] == '–ø—Ä–æ–π–¥–µ–Ω–æ'])
                planned_mpp = len(mpp_df[mpp_df['–ü–æ—Å–µ—â–µ–Ω–∏–µ –ú–ü–ü'] == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'])
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ", total_assigned)
                
                with col2:
                    st.metric("–ó–∞–≤–µ—Ä—à–∏–ª–∏", f"{completed_mpp} ({completed_mpp/total_assigned*100:.1f}%)" if total_assigned > 0 else "0")
                
                with col3:
                    st.metric("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", planned_mpp)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 5: –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.subheader("–¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' in filtered_df.columns:
            top_df = filtered_df.sort_values('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', ascending=False).head(5)
            bottom_df = filtered_df.sort_values('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', ascending=True).head(5)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**")
                st.dataframe(top_df[['–§–ò–û', '–æ—Ç–¥–µ–ª', '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ']].reset_index(drop=True))
            
            with col2:
                st.markdown("**–•—É–¥—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**")
                st.dataframe(bottom_df[['–§–ò–û', '–æ—Ç–¥–µ–ª', '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ']].reset_index(drop=True))
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 6: –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫
        st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤")
        
        attempts_data = []
        
        for module in modules:
            attempt1_col = f"{module} –ø–æ–ø—ã—Ç–∫–∞ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            attempt2_col = f"{module} –ø–æ–ø—ã—Ç–∫–∞ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            
            if attempt1_col in df.columns:
                first_attempt = filtered_df[attempt1_col].dropna()
                second_attempt = filtered_df[attempt2_col].dropna()
                
                if len(first_attempt) > 0:
                    passed_first = len(first_attempt[first_attempt >= 85])
                    passed_second = len(second_attempt[second_attempt >= 85]) if not second_attempt.empty else 0
                    
                    attempts_data.append({
                        '–ú–æ–¥—É–ª—å': module,
                        '–ü—Ä–æ—à–ª–∏ —Å 1 –ø–æ–ø—ã—Ç–∫–∏': passed_first,
                        '–ü—Ä–æ—à–ª–∏ —Å–æ 2 –ø–æ–ø—ã—Ç–∫–∏': passed_second,
                        '–ù–µ –ø—Ä–æ—à–ª–∏': len(first_attempt) - passed_first - passed_second
                    })
        
        if attempts_data:
            attempts_df = pd.DataFrame(attempts_data)
            attempts_df = attempts_df.melt(id_vars='–ú–æ–¥—É–ª—å', var_name='–ü–æ–ø—ã—Ç–∫–∞', value_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            
            fig5 = px.bar(attempts_df, x='–ú–æ–¥—É–ª—å', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', color='–ü–æ–ø—ã—Ç–∫–∞',
                         color_discrete_map={
                             '–ü—Ä–æ—à–ª–∏ —Å 1 –ø–æ–ø—ã—Ç–∫–∏': '#2ecc71',
                             '–ü—Ä–æ—à–ª–∏ —Å–æ 2 –ø–æ–ø—ã—Ç–∫–∏': '#f39c12',
                             '–ù–µ –ø—Ä–æ—à–ª–∏': '#e74c3c'
                         },
                         barmode='stack')
            
            st.plotly_chart(fig5, use_container_width=True)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 7: –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        if '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–∏)' in filtered_df.columns:
            st.subheader("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
            
            duration_df = filtered_df[filtered_df['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–∏)'].notna()]
            
            if not duration_df.empty:
                avg_duration = duration_df['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–∏)'].mean()
                
                fig6 = px.histogram(duration_df, x='–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–∏)',
                                   nbins=20,
                                   color_discrete_sequence=['#3498db'])
                fig6.add_vline(x=avg_duration, line_dash="dash", line_color="red",
                              annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_duration:.1f} –¥–Ω–µ–π", 
                              annotation_position="top")
                
                st.plotly_chart(fig6, use_container_width=True)
        
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.subheader("–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        if '–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è' in filtered_df.columns and '–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è' in filtered_df.columns:
            display_cols = ['–§–ò–û', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '–æ—Ç–¥–µ–ª', '–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è', 
                          '–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è', '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–∏)', 
                          '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', '—Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è']
            
            st.dataframe(filtered_df[display_cols].sort_values('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', ascending=False))
        
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")

if __name__ == "__main__":
    main()
